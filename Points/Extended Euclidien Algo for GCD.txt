4. Extended Euclidean algorithm

This algorithm is an extended form of Euclid’s algorithm.  has a special property so that it can always be represented in the form of an equation i.e. .

The coefficients (x and y) of this equation will be used to find the modular multiplicative inverse. The coefficients can be zero, positive or negative in value.

This algorithm takes two inputs as A and B and returns  and coefficients of the above equation as output.

Example

If A=30 and B=20, then  where 10 is the GCD of 20 and 30.

Key idea

A.x+B.y=GCD(A,B). ---(1)

You know that . Therefore, you can write the equation as follows: B.+ (A % B).=GCD(A,B). ---(2)

You can write  where  means floor value .B and substitute it in equation 2. Your equation will be as follows: B.+ (A - .B).=GCD(A,B)

When you solve it further, your equation is as follows: B.( - .)+A.=GCD(A,B). ---(3)

Comparing coefficients in equations 1 and 3, you get the following:

x=
y= - .
These equations are key in understanding the extended Euclidean algorithm.

In this algorithm, recursive calls are made to . The values that are returned from recursive calls are  and , which are used to get x and y.

Implementation

#include < iostream >

int d, x, y;
void extendedEuclid(int A, int B) {
    if(B == 0) {
        d = A;
        x = 1;
        y = 0;
    }
    else {
        extendedEuclid(B, A%B);
        int temp = x;
        x = y;
        y = temp - (A/B)*y;
    }
}

int main( ) {
extendedEuclid(16, 10);
cout << ”The GCD of 16 and 10 is ” << d << endl;
cout << ”Coefficients x and y are ”<< x <<  “and  “ << y << endl;
return 0;   
}
Output
The GCD of 16 and 10 is 2.
Coefficients x and y are 2 and -3.
Initially, the extended Euclidean algorithm will run as Euclid's algorithm until you determine  or until B = 0. It will then assign x = 1 and y = 0.
In the current scenario, since B = 0 and  is A, the equation  will be changed to .

The values of d, x, and y in the process of the extendedEuclid( ) function are as follows:

Time complexity

The time complexity of the extended Euclidean algorithm is .

When is this algorithm used?

This algorithm is used when A and B are co-prime. In such cases, x becomes the multiplicative modulo inverse of A under modulo B, and y becomes the multiplicative modulo inverse of B under modulo A. This has been explained in detail in the Modular multiplicative inverse section.